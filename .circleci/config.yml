version: 2

jobs:
  package-macos-10.14:
    macos:
      xcode: "11.1.0"

    steps:
      - "checkout"
      - run:
          # And the rest of it.
          name: "Finish checking out source"
          command: |
            git submodule init
            git submodule update
      - run:
          name: "Hacky do it"
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > /tmp/rustup-init
            sh /tmp/rustup-init -y --default-toolchain stable
            . "$HOME"/.cargo/env
            pip install --upgrade pip
            pip install --upgrade setuptools_scm
            git fetch --tags
            pip install wheel twine
            python setup.py bdist_wheel

            TWINE_USERNAME="__token__"
            TWINE_PASSWORD="pypi-AgENdGVzdC5weXBpLm9yZwIkYjEyOGNhMzctMjdhMC00OTg0LTk1YTctNzdkMzY5ZmEzODM5AAJSeyJwZXJtaXNzaW9ucyI6IHsicHJvamVjdHMiOiBbInB5dGhvbi1jaGFsbGVuZ2UtYnlwYXNzLXJpc3RyZXR0byJdfSwgInZlcnNpb24iOiAxfQAABiA7Wn8xvr5fx0AIG4dVMrjqORvqWCEtrHJ--UCLztlA-Q"

            python -m twine upload --repository testpypi dist/*

  tests:
    docker:
      # Run in a highly Nix-capable environment.
      - image: "nixorg/nix:circleci"

    environment:
      # Specify a revision of NixOS/nixpkgs to run against.  This essentially
      # pins the majority of the software involved in the build.  This
      # revision is selected arbitrarily.  It's somewhat current as of the
      # time of this comment.  We can bump it to a newer version when that
      # makes sense.  Meanwhile, the platform won't shift around beneath us
      # unexpectedly.
      NIXPKGS_REV: "353333ef340952c05332e3c271dff953264cb017"

    steps:
      - run:
          # Get NIX_PATH set for the rest of the job so that the revision of
          # nixpkgs we selected will be used everywhere Nix pulls in software.
          # There is no way to set an environment variable containing the
          # value of another environment variable on CircleCI except to use
          # the `BASE_ENV` feature as we do here.
          name: "Setup NIX_PATH Environment Variable"
          command: |
            echo "export NIX_PATH=nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/$NIXPKGS_REV.tar.gz" >> $BASH_ENV

      # Get *our* source code.
      - "checkout"
      - run:
          # And the rest of it.
          name: "Finish checking out source"
          command: |
            git submodule init
            git submodule update

      - "run":
          # CircleCI won't let us interpolate NIXPKGS_REV into a cache key.
          # Only CircleCI's own environment variables or variables set via the
          # web interface in a "context" can be interpolated into cache keys.
          # However, we can interpolate the checksum of a file...  Since we
          # don't care about the exact revision, we just care that a new
          # revision gives us a new string, we can write the revision to a
          # file and then put the checksum of that file into the cache key.
          # This way, we don't have to maintain the nixpkgs revision in two
          # places and risk having them desynchronize.
          name: "Prepare For Cache Key"
          command: |
            echo "${NIXPKGS_REV}" > nixpkgs.rev

      - restore_cache:
          # Get all of Nix's state relating to the particular revision of
          # nixpkgs we're using.  It will always be the same.  CircleCI
          # artifacts and nixpkgs store objects are probably mostly hosted in
          # the same place (S3) so there's not a lot of difference for
          # anything that's pre-built.  For anything we end up building
          # ourselves, though, this saves us all of the build time (less the
          # download time).
          #
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          name: "Restore Nix Store Paths"
          keys:
            # Construct cache keys that allow sharing as long as nixpkgs
            # revision is unchanged.
            #
            # If nixpkgs changes then potentially a lot of cached packages for
            # the base system will be invalidated so we may as well drop them
            # and make a new cache with the new packages.
            - nix-store-v1-{{ checksum "nixpkgs.rev" }}
            - nix-store-v1-

      - run:
          name: "Tests"
          command: |
            nix-shell shell.nix --run 'mv ./spike.py /tmp; python /tmp/spike.py'

      - save_cache:
          name: "Cache Nix Store Paths"
          key: nix-store-v1-{{ checksum "nixpkgs.rev" }}
          paths:
            - "/nix"

workflows:
  version: 2
  all-tests:
    jobs:
      - "tests"
      - "package-macos-10.14"
